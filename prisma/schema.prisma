generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  admin_id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  admin_full_name     String   @db.VarChar(256)
  admin_username      String   @db.VarChar(64)
  admin_password_salt String   @db.Char(5)
  admin_password_hash String   @db.VarChar(512)
  admin_is_active     Boolean? @default(true)
  admin_is_superadmin Boolean  @default(false)
  @@map("admin")
}

model Customer {
  customer_id             String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_first_name     String  @db.VarChar(256)
  customer_last_name      String  @db.VarChar(256)
  customer_password_salt  String  @db.Char(5)
  customer_password_hash  String  @db.VarChar(512)
  customer_email          String  @unique @db.VarChar(256)
  customer_contact_number String  @db.VarChar(64)
  customer_is_active      Boolean @default(true)
  order                   order[]
  @@map("customer")
}

model OrderStatus {
  order_status_id          Int     @id @default(autoincrement())
  order_status_description String  @db.VarChar(256)
  order                    order[]
  @@map("order_status")
}

model Product {
  product_id                         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  product_name                       String       @db.VarChar(256)
  product_price                      Decimal      @db.Decimal(12, 2)
  product_image_link                 String       @db.VarChar(512)
  product_stock                      Int          @default(0)
  product_type                       Int
  product_description                String       @db.VarChar(512)
  product_code                       String       @unique @db.VarChar(64)
  product_type_productToproduct_type product_type @relation(fields: [product_type], references: [product_type_id], onDelete: NoAction, onUpdate: NoAction, map: "product_product_type_product_type_id_fk")
  order                              order[]
  @@map("product")
}

model ProductType {
  product_type_id Int       @id @default(autoincrement())
  product_type    String    @db.VarChar(256)
  product         product[]
  @@map("product_type")
}

model StaffPosition {
  staff_position_id Int     @id @default(autoincrement())
  staff_position    String  @db.VarChar(256)
  staff             staff[]
  @@map("staff_position")
}

model TransactionType {
  transaction_type_id          Int           @id @default(autoincrement())
  transaction_type_description String        @db.VarChar(128)
  transaction                  transaction[]
  @@map("transaction_type")
}

model Order {
  order_id                         String       @id(map: "Order_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_product_code               String       @db.VarChar(64)
  order_customer_email             String       @db.VarChar(512)
  order_requests                   String?      @db.VarChar(512)
  order_date                       DateTime     @db.Timestamptz(6)
  order_staff_username             String       @db.VarChar(64)
  order_status                     Int
  order_number                     Int          @default(autoincrement())
  customer                         customer     @relation(fields: [order_customer_email], references: [customer_email], onDelete: NoAction, onUpdate: NoAction, map: "order_customer_customer_email_fk")
  order_status_orderToorder_status order_status @relation(fields: [order_status], references: [order_status_id], onDelete: NoAction, onUpdate: NoAction, map: "order_order_status_order_status_id_fk")
  product                          product      @relation(fields: [order_product_code], references: [product_code], onDelete: NoAction, onUpdate: NoAction, map: "order_product_product_code_fk")
  staff                            staff        @relation(fields: [order_staff_username], references: [staff_username], onDelete: NoAction, onUpdate: NoAction, map: "order_staff_staff_username_fk")
  @@map("order")
}

model Staff {
  staff_id                             String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  staff_full_name                      String         @db.VarChar(256)
  staff_contact_number                 String         @db.VarChar(64)
  staff_username                       String         @unique @db.VarChar(64)
  staff_password_salt                  String         @db.Char(5)
  staff_password_hash                  String         @db.VarChar(512)
  staff_position                       Int
  staff_is_active                      Boolean        @default(true)
  staff_position_staffTostaff_position staff_position @relation(fields: [staff_position], references: [staff_position_id], onDelete: NoAction, onUpdate: NoAction, map: "staff_staff_position_staff_position_id_fk")
  order                                order[]
  @@map("staff")
}

model Transaction {
  transaction_id                                 String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  transaction_agent                              String           @db.VarChar(64)
  transaction_description                        String           @db.VarChar(256)
  transaction_type                               Int
  transaction_amount                             Decimal?         @default(0.0) @db.Decimal(12, 2)
  transaction_timestamp                          DateTime?        @default(now()) @db.Timestamptz(6)
  transaction_type_transactionTotransaction_type transaction_type @relation(fields: [transaction_type], references: [transaction_type_id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_transaction_type_transaction_type_id_fk")
  @@map("transaction")
}
